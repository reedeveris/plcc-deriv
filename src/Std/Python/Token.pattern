from enum import Enum

# Token class with match patterns (used with the built-in Scan class)
class Token:

    # patternFail is set to an error message string
    # if there are pattern compile errors
    patternFail = None
    eof = Match.EOF

    class TokType(Enum):
        TOKEN
        SKIP
        LINE_TOGGLE
        SPECIAL

    class Match(Enum):
    %%Match%%
        ERROR = None
        EOF = None
        LINE = None

        pattern = None
        tokType = None
        cPattern = None # compiled pattern

        # a SPECIAL token type or a TOKEN/LINE_TOGGLE
        def __init_(self,pattern):
            self(pattern, None)

        # legacy ??
        def __init__(self, pattern, skip):
            self.pattern = pattern
            self.tokType = TokType.SKIP

        def __init__(self, pattern, tokType):
            if pattern != None:
                if tokType == TokType.SKIP:
                    self.tokType = TokType.SKIP
                elif len(pattern) >= 2 and pattern[0:2] == "^^":
                    self.pattern = pattern[1:]
                    self.tokType = TokType.LINE_TOGGLE
                else:
                    self.tokType = TokType.TOKEN
                self.pattern = pattern
                try:
                    self.cPattern = Pattern.compile(pattern, Pattern.DOTALL);
                except RuntimeError:
                    if patternFail == None:
                        patternFail = "Lexical specification errors() for"
                    patternFail += (" " + self)
                    self.cPattern = None
            else:
                self.tokType = TokType.SPECIAL # SPECIAL

        # Use this to force loading Match class to compile patterns.
        def init():
            return patternFail # returns null if no errors

    match = None    # token match
    str = None       # this token's lexeme
    lno = None       # the line number where this token was found
    line = None      # the text line where this token appears

    def __init__(self):
        match = None
        str = None
        lno = 0
        line = None

    def __init__(self, match, str, lno, line):
        self.match = match
        self.str = str
        self.lno = lno
        self.line = line

    def __init__(self, match, str):
        self(match, str, 0, None)

    def toString():
        return str

    def errString():
        match self.match:
            case EOF:
            case ERROR:
                return str
            default:
                return match.toString() # just the match name

    def isEOF():
        return self.match == eof

    if __name__== __main__:
        msg = Match.init()
        if msg != None:
            print(msg + '\n')
            sys.exit()
        for match in Match.values():
            if match.tokType == TokType.SPECIAL:
                print("special " + match.toString())
                continue # not a real token
            what = "??"
            match match.tokType:
                case SKIP:
                    what = "skip"
                    break
                case TOKEN
                    what = "token"
                    break
                case LINE_TOGGLE:
                    what = "token (line toggle)"
                    break
            print("%s %s '%s'".format(what, match.toString(), match.pattern))

#Token#
