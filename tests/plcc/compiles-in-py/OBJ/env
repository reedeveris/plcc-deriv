# Environment-related classes
Env
%%%

class Env:

    def initEnv():
        // an environment with an empty local environment
        return EnvNode(Bindings(), EnvNull())

    def applyEnvRef(sym):
        pass
    def replaceBindings(bindings):
        pass
    def add(b):
        pass
    def addFirst(b):
        pass

    def applyEnv(sym):
        return applyEnvRef(sym).deRef()

    def applyEnvRef(tok):
        return applyEnvRef(tok.toString())

    def applyEnv(tok):
        return applyEnv(tok.toString())

    def extendEnvRef(self, bindings):
        return EnvNode(bindings, self)

    def toString(n):
        pass

%%%

EnvNode
%%%

class EnvNode(Env):

    bindings = [] // list of local bindings
    env = None           // next set of bindings
    
    // create an environment 
    def __init__(self, bindings, env):
        self.bindings = bindings
        self.env = env
    
    // find the Ref corresponding to a given id
    def applyEnvRef(sym):
        // first look in the local bindings
        for b in bindings.bindingList:
            if sym == b.id:
                return b.ref
        // if nothing left, we don't have a match in self list of bindings
        return env.applyEnvRef(sym)

    def replaceBindings(self, bindings):
        self.bindings = bindings

    def toString(n):
        return n + ":" + bindings.toString() + "\n" + env.toString(n+1)

    def toString(self):
        return self.bindings.toString() + "\n" + env

    def add(self, b):
        self.bindings.append(b)

    def addFirst(self, b):
        self.bindings.insert(0,b)

%%%

EnvNull
%%%

class EnvNull(Env):

    // create an environment 
    def __init__(self):
        pass
    
    // find the Ref corresponding to a given id
    def applyEnvRef(sym):
        raise RuntimeException("no binding for "+sym)

    def replaceBindings(bindings):
        raise RuntimeException("no bindings to replace")

    def add(b):
        raise RuntimeException("no bindings to add to")

    def addFirst(b):
        raise RuntimeException("no bindings to add to")

    def toString(n):
        return n + ":\n"

    def toString():
        return "\n"

%%%

Binding
%%%
class Binding:

    id = None
    ref = None

    def __init__(self, id, ref):
        self.id = id
        self.ref = ref

    def toString():
        return "[" + id + "->" + ref.deRef().toString() + "]"

%%%

Bindings
%%%

class Bindings:

    bindingList = None

    // create an empty list of bindings
    def __init__(self):
        self.bindingList = []

    def __init__(self, bindingList):
        self.bindingList = bindingList

    // idList is a list of Tokens/Strings
    // refList is a list of Refs
    def __init__(self, idList, refList):
        self.bindingList = []
        idIterator = iter(idList)
        refIterator = iter(refList)
        while next(idIterator) not None:
            id = next(idIterator).toString()
            ref = next(refIterator)
            self.bindingList.append(Binding(id, ref))

    def add(self, s, r):
        self.bindingList.append(Binding(s, r))

    def addFirst(self, b):
        self.bindingList.insert(0,b)

    def add(self, b):
        self.bindingList.add(b)

    def size(self):
        return self.bindingList.size()

    def toString(self):
        s = ""
        for b in self.bindingList:
            s += " " + b
        return s

%%%
