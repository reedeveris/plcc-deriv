# class methods

Program
%%%

    initEnv = Env.initEnv()

%%%

Define
%%%
    // notice that calling toString triggers a modification
    // of the initial environment
    def toString():
        id = var.toString():
        val = exp.eval(self.initEnv)
        initEnv.addFirst(Binding(id, ValRef(val)))
        return id // return *something*
%%%

Eval
%%%
    def toString():
        return exp.eval(initEnv).toString()
%%%

Exp
%%%
    def eval(env):
        pass
%%%

ExitExp
%%%
    def eval(env):
        raise RuntimeException("...exiting...")
%%%

PrimappExp
%%%

    def toString():
        return prim.toString()+ "(" + self.rands + ")"

    def eval(env):
        // evaluate the terms in the expression list
        // and apply the prim to the array of integer results
        valList = self.rands.evalRands(env)
        va = Val.toArray(valList)
        return prim.apply(va)

%%%

LitExp
%%%

    def eval(env):
        return IntVal(lit.toString())

    def toString():
        return lit.toString()


%%%

ChrExp
%%%
    def eval(self, env):
        return IntVal(self.chr.toString()[1])

    def toString(self, ):
        return self.chr.toString()

%%%

StrngExp
%%%
    def eval(env):
        s = strng.toString()
        len = s.length()-1
        chars = []
        // We know that s[0] is '"'
        // and that s[len] is '"'
        pos = 1
        while pos < len:
            c = s[pos++]
            if c == '\\':
                // escape!
                c = s.charAt(pos++)
                match c:
                    case 'a':
                        c = 7
                        break
                    case 'b':
                        c = 8
                        break
                    case 't':
                        c = 9
                        break
                    case 'n':
                        c = 10
                        break
                    case 'f':
                        c = 12
                        break
                    case 'r':
                        c = 13
                        break
                    default :
                        break
            chars.insert(0, c) // add to beginning of list
        // chars is in reverse order -- now build a ListVal in proper order
        lst = Val.listNull
        for c in chars:
            lst = lst.append(IntVal(c))
        return lst

    def toString():
        return strng.toString()

%%%

IfExp
%%%
    def eval(env)
        testVal = testExp.eval(env)
        if testVal.isTrue():
            return trueExp.eval(env)
        else:
            return falseExp.eval(env)

    def toString()
        return "if " + testExp + " then " + trueExp + " else " +falseExp

%%%

VarExp
%%%

    def eval(env):
        return env.applyEnv(var)

    def toString():
        return var.toString()

%%%

LetExp
%%%
    def eval(Env env):
        nenv = letDecls.addBindings(env)
        return exp.eval(nenv)

    def toString():
        return " ...LetExp... "
%%%

LetrecExp
%%%
    def eval(env):
        nenv = letrecDecls.addBindings(env)
        return exp.eval(nenv)

    def toString():
        return " ...LetrecExp... "

%%%

ProcExp
%%%
    def eval(env):
        return proc.makeClosure(env)

    def toString():
        return " ...ProcExp... "

%%%

ListExp
%%%
    def eval(env):
        valList = rands.evalRands(env)
        listVal = Val.listNull
        n = valList.size()
        // process the elements in reverse order
        while n > 0:
            listVal = ListNode(valList.get(--n), listVal)
        return listVal

    def toString():
        return " ...ListExp... "

%%%

ClassExp
%%%
    def eval(env):
        return classDecl.eval(env)


%%%

ClassDecl
%%%
    def eval(env):
        superClass = ext.toClassVal(env)
        return StdClass(env, superClass, statics, fields, methods)

%%%

Statics
%%%
    // Add new bindings to the static bindings -- behaves like top-level
    // defines.
    def addStaticBindings(Bindings staticBindings, Env staticEnv):
        varIter = iter(varList) // LHS identifiers
        expIter = iter(expList)    // RHS expressions
        while next(varIter) not None:
            var = next(varIter)
            id = var.toString() // the LHS identifier
            exp = next(expIter)    // the RHS expression
            val = exp.eval(staticEnv)
            b = Binding(id, ValRef(val))
            staticBindings.addFirst(b)

%%%

NewExp
%%%
    def eval(env):
        // get the class from which this object will be created
        val = exp.eval(env)
        // create a reference to a dummy value (nil)
        objRef = ValRef(Val.nil)
        // let the class create the object
        objectVal = val.makeObject(objRef)
        // set the reference to the newly created object
        return objRef.setRef(objectVal)

%%%

AppExp
%%%

    def eval(env):
        p = exp.eval(env)
        valList = rands.evalRands(env)
        return p.apply(valList)

    def toString():
        return " ...AppExp... "

%%%

SeqExp
%%%
    def eval(Env env):
        v = exp.eval(env)
        for e in seqExps.expList:
            v = e.eval(env)
        return v

    def toString():
        return " ...SeqExp... "

%%%

SetExp
%%%
    def eval(env):
        // return loc.getEnv(env).applyEnvRef(var).setRef(exp.eval(env));
        nenv = loc.getEnv(env)
        ref = nenv.applyEnvRef(var)
        v = exp.eval(env);
        return ref.setRef(v)

%%%

Loc
%%%
    def getEnv(env):
        pass
%%%

ObjLoc
%%%
    def getEnv(env):
        v = exp.eval(env)
        return v.env()

%%%

SimpleLoc
%%%
    def getEnv(env):
        return env

%%%

EnvExp
%%%
    def eval(env):
        v = vExp.eval(env)
        return eExp.eval(v.env())

%%%

EenvExp
%%%
    def eval(env):
        v = exp.eval(env)      // the environment object
        return mangle.eval(v, env)

%%%

BangAtExp
%%%
    def eval(env):
        return env.applyEnv("!@")

%%%

Mangle
%%%
    def eval(v, env):
        expIter = iter(expList)
        randsIter = iter(randsList)
        while next(expIter) not None:
            // expIter.next() ProcExp to apply
            // randsIter.next() are the method rands -- evaluated in env
            // v.env() is the environment in which to build the ProcVal
            p = next(expIter).eval(v.env())
            valList = next(randsIter).evalRands(env)
            v = p.apply(valList)
        return v

%%%

WithExp
%%%
    def eval(env):
        return EnvExp(vExp, eExp).eval(env)

%%%

NilExp
%%%
    def eval(env):
        return Val.nil

%%%

SendExp
%%%

    def eval(env):
        v = objExp.eval(env)
        p = procExp.eval(v.env()) // in the object env
        valList = rands.evalRands(env) // in calling env
        return p.apply(valList)

    def toString():
        return " ...SendExp... "

%%%

AtExp
%%%
    def eval(env):
        return ObjectVal(env)

%%%

AtAtExp
%%%
    def eval(env):
        System.out.println(env.toString())
        return ObjectVal(env)

%%%

DisplayExp
%%%
    def eval(env):
        v = exp.eval(env)
        System.out.print(v)
        return v

%%%

Display1Exp
%%%
    def eval(env):
        v = exp.eval(env)
        System.out.print(v+" ")
        return v

%%%

NewlineExp
%%%
    def eval(env):
        System.out.println()
        return Val.nil

%%%

PutcExp
%%%
    def eval(env):
        v = exp.eval(env)
        System.out.print(v.putc())
        return Val.nil

%%%

ErrorExp
%%%
    def eval(env):
        val = exp.eval(env)
        raise RuntimeException("error: " + val)

%%%

PerrorExp
%%%
    def eval(env):
        str = strng.toString()
        len = str.length()
        str = str.substring(1,len-1)
        raise RuntimeException("error: " + str)

%%%

Ext
%%%
    def toClassVal(env):
        pass
%%%

Ext0
%%%

    def toClassVal(env):
        return EnvClass(Program.initEnv)

%%%

Ext1
%%%
    def toClassVal(env):
        v = exp.eval(env)
        return v.classVal()

%%%

Proc
%%%
    def makeClosure(env):
        return ProcVal(formals, exp, env)

%%%

LetDecls
%%%
    def addBindings(env):
        rands = Rands(expList)
        valList = rands.evalRands(env)
        refList = Ref.valsToRefs(valList)
        bindings = Bindings(varList, refList)
        return env.extendEnvRef(bindings)

    def toString():
        return " ...LetDecls... "

%%%

LetrecDecls
%%%

    def addBindings(env):
        nenv = env.extendEnvRef(null) // no bindings yet
        valList = []
        for p in procList:
            valList.append(p.makeClosure(nenv))
        refList = Ref.valsToRefs(valList)
        Bindings bindings = Bindings(varList, refList)
        nenv.replaceBindings(bindings)
        return nenv

    def toBindingsRef(env):
        refList = []
        for p in procList:
            refList.append(ValRef(p.makeClosure(env)))
        return Bindings(varList, refList)

%%%

Rands
%%%
    def toString():
        s = ""   // the string to return
        sep = "" // no separator for the first expression
        // get all of the expressions in the expression list
        for e in expList:
            s += sep + e
            sep = ","   // commas separate the rest of the expressions
        return s

    def evalRands(env):
        valList = []
        for e in expList:
            valList.append(e.eval(env))
        return valList

%%%
